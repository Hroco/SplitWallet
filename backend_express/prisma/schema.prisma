// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Wallets {
  id          String       @id @default(cuid())
  name        String
  description String
  currency    String
  category    String
  total       Float        @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  walletUsers WalletUser[]
  walletItems WalletItem[]
}

model WalletUser {
  id           String         @id @default(cuid())
  name         String
  bilance      Float          @default(0)
  total        Float          @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  users        User?          @relation(fields: [userId], references: [id])
  WalletItem   WalletItem[]
  RecieverData RecieverData[]
  Wallets      Wallets        @relation(fields: [walletsId], references: [id], onDelete: Cascade)
  walletsId    String
  userId       String?
}

model WalletItem {
  id        String         @id @default(cuid())
  name      String
  tags      String[]
  payer     WalletUser     @relation(fields: [userId], references: [id])
  amount    Float
  type      String
  date      DateTime
  recievers RecieverData[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  Wallets   Wallets        @relation(fields: [walletsId], references: [id], onDelete: Cascade)
  walletsId String
  userId    String
}

model RecieverData {
  id           String     @id @default(cuid())
  reciever     WalletUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount       Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  WalletItem   WalletItem @relation(fields: [walletItemId], references: [id], onDelete: Cascade)
  walletItemId String
  userId       String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  isVerified    Boolean?
  image         String?
  googleId      String?
  locale        String?
  picture       String?
  accounts      Account[]
  sessions      Session[]
  WalletUser    WalletUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
